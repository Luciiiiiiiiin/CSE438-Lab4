Feature 1: Long Press to Save Image
I added a feature that allows users to save the movie poster image to their photo library by long-pressing on the image in the MovieDetailViewController. This was implemented using a UILongPressGestureRecognizer attached to the image view. When a long press is detected, the app requests permission to access the user's photo library and then saves the image. This involved adding the appropriate usage description to the Info.plist file, configuring the gesture recognizer, and handling the logic to save the image. Implementing this feature required a moderate level of effort compared to the other portions, as it involved understanding gesture recognizers, handling image saving logic, and ensuring proper permissions. This feature was added to provide users with a convenient way to save their favorite movie posters, enhancing the overall functionality of the app. For an app that revolves around movie information, giving users the ability to save images directly enriches their interaction with the app, making it more useful and engaging.

Feature 2: Share Button in Movie Detail View
I added a share button to the MovieDetailViewController that allows users to share movie information with others. The button is displayed as an icon in the navigation bar, making it easily accessible. The share button was implemented using the UIBarButtonItem with a system icon, which triggers a UIActivityViewController that allows users to share the movie title, overview, and other details. This involved setting up the bar button item in the navigation bar and configuring the share sheet to include the relevant movie details. Adding the share button was relatively straightforward compared to the other portions, mainly requiring the integration of the UIActivityViewController and ensuring that the movie details were formatted correctly for sharing. This feature was added to allow users to easily share movie information with friends and family, making the app more social and interactive. The ability to share content directly from the app makes it more user-friendly and promotes the app among users' social circles, potentially increasing its reach and engagement.


Feature 3: Watch Trailer Feature
I added a feature that allows users to watch movie trailers directly within the app. Users can click a button in the MovieDetailViewController to play the trailer using an embedded web view. This feature was implemented by fetching the trailer URL from the TMDB API and using WebKit to display the video. This involved making an additional API request to retrieve the trailer data, configuring the web view, and presenting the video player. Implementing the trailer feature was more complex than other portions because it involved additional API integration, handling web content, and ensuring a seamless user experience. This feature was added because watching trailers provides users with a more immersive and informative experience, allowing them to get a better sense of the movie directly within the app. It significantly enhances the app's value by offering rich media content, transforming the app from a static information source to an interactive platform where users can engage more deeply with the movie content.
